apply plugin: 'maven-publish'
apply plugin: 'signing'

File file = project.file('gradle.properties')
if (!file.exists()) return

// 读取签名信息
def singInfoProperties = new Properties()
singInfoProperties.load(rootProject.file('local.properties').newDataInputStream())
ext["signing.keyId"] = singInfoProperties.get("signing.keyId")
ext["signing.password"] = singInfoProperties.get("signing.password")
ext["signing.secretKeyRingFile"] = singInfoProperties.get("signing.secretKeyRingFile")
ext["ossrhUsername"] = singInfoProperties.get("ossrhUsername")
ext["ossrhPassword"] = singInfoProperties.get("ossrhPassword")

if (ext["signing.keyId"] == null) return

// 读取各个组件的配置信息
def GROUP_ID = project.ext.MAVEN_GROUPID
def ARTIFACT_ID = project.ext.MAVEN_ARTIFACTID
def VERSION = project.ext.MAVEN_VERSION
def IS_SNAPSHOT = project.ext.MAVEN_SNAPSHOT.toBoolean()
def IS_JAR = project.ext.MAVEN_ISJAR.toBoolean()

task sourceJar(type: Jar) {
    if (IS_JAR) {
        from sourceSets.main.java.srcDirs
    } else {
        from android.sourceSets.main.java.srcDirs
    }
    archiveClassifier = "sources"
}

afterEvaluate {
    publishing {
        publications { PublicationContainer publicationContainer ->
            maven(MavenPublication) {
                artifact sourceJar // 上传源码
                if (IS_JAR) {
//                    artifact "$buildDir/libs/${project.name}.jar" 这种写法需要手动打最新版 jar 包
                    afterEvaluate { artifact(tasks.getByName("jar")) }
                } else {
//                    artifact "$buildDir/outputs/aar/${project.name}-release.aar" 这种写法需要手动打最新版 aar 包
                    afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
                }
                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                // 是否为 SNAPSHOT 版本
                if (IS_SNAPSHOT) {
                    version = "${VERSION}-SNAPSHOT"
                } else {
                    version = VERSION
                }

                pom {
                    // 依赖传递
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        project.configurations.implementation.allDependencies.each {
                            // 处理 arch-epic 框架依赖，
                            if (it.group != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }

                    // 正式发布需要填写以下信息，SNAPSHOT 不填以下信息就可以发布。
                    name = 'teemo'
                    url = 'https://github.com/ilpanda/teemo'
                    description = 'teemo 快跑，我的个人快速调试库。'

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                            comments = 'A business-friendly OSS license'
                        }
                    }

                    scm {
                        url = 'https://github.com/ilpanda/teemo'
                        connection = 'scm:git@https://github.com/ilpanda/teemo.git'
                        developerConnection = 'scm:git@https://github.com/ilpanda/teemo.git'
                    }

                    developers {
                        developer {
                            id = 'ilpanda'
                            name = 'ilpanda'
                            email = 'litencent@gmail.com'
                            url = 'https://github.com/ilpanda/teemo'
                        }
                    }
                }
            }
        }

        // 配置 maven 仓库
        repositories { RepositoryHandler handler ->
            // 发布到 maven 在线仓库
            maven {
                // This is an arbitrary name, you may also use "mavencentral" or
                // any other name that's descriptive for you
                name = "teemo"

                // staging 仓库
                def stagingRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                // snapshot 仓库
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                // You only need this if you want to publish snapshots, otherwise just set the URL
                // to the release repo directly
                url = IS_SNAPSHOT ? snapshotsRepoUrl : stagingRepoUrl

                // The username and password we've fetched earlier
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
            // 发布到项目根路径的 repo 文件夹
            maven {
                name = 'CustomLocalMavenRepo'
                url = "file://${rootDir}/repo"
            }

        }
    }
}


signing {
    sign publishing.publications
}